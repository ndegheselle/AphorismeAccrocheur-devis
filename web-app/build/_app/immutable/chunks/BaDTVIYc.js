var y=Object.defineProperty;var D=(t,e,s)=>e in t?y(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var r=(t,e,s)=>D(t,typeof e!="symbol"?e+"":e,s);import{d as i,a,c as o,Q as n,b as d,I as h,P as f,R as w}from"./C6pl-CaQ.js";import{c as l}from"./Dy5JpXxM.js";import{P as $}from"./C6FzuqNZ.js";class u{constructor(){r(this,"$id");r(this,"firstName");r(this,"lastName");r(this,"adress");r(this,"city");r(this,"zipCode");r(this,"email");r(this,"phone")}get fullName(){return`${this.firstName} ${this.lastName}`}get fullAddress(){return`${this.adress}, ${this.city}, ${this.zipCode}`}get exists(){return this.$id!=null}}async function N(t){if(d.currentUser==null)throw new Error("User is not connected.");let e=await i.createDocument(a,o.clients,h.unique(),t,[f.read(w.user(d.currentUser.$id)),f.update(w.user(d.currentUser.$id)),f.delete(w.user(d.currentUser.$id))]);return l(u,e)}async function C(t,e){let s=await i.listDocuments(a,o.clients,[n.limit(e),n.offset((t-1)*e)]),c=s.documents.map(m=>l(u,m));return new $(c,s.total,t,e)}async function g(t,e,s){let c=await i.listDocuments(a,o.clients,[n.limit(s),n.offset((e-1)*s),n.or([n.contains("firstName",t),n.contains("lastName",t),n.contains("adress",t),n.contains("city",t),n.contains("zipCode",t)])]),m=c.documents.map(p=>l(u,p));return new $(m,c.total,e,s)}async function I(t){let e=await i.getDocument(a,o.clients,t);return l(u,e)}async function U(t){if(t.$id==null)throw new Error("Client ID is null.");let e=await i.updateDocument(a,o.clients,t.$id,t);return l(u,e)}async function P(t){await i.deleteDocument(a,o.clients,t)}const x={create:N,getAll:C,getById:I,update:U,remove:P,search:g};export{u as C,x as r};
